generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider    = "prisma-erd-generator"
  output      = "../diagram/erd.svg"
  DISABLE_ERD = true
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                    String    @id @default(uuid())
  name                  String
  email                 String    @unique
  password              String
  plan                  String    @default("FREE")
  fleet                 Fleet[]
  driver                Driver[]
  client                client[]
  startLocations        String?
  maxDriver             Int       @default(7)
  maxFleet              Int       @default(1)
  maxVehicle            Int       @default(7)
  refreshToken          String?
  refreshTokenExpiresAt DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model client {
  id        String   @id @default(uuid())
  name      String
  cnpj      String?
  locations String?
  work      Work[]
  Account   Account  @relation(fields: [accountId], references: [id])
  accountId String
  isDisable Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("client")
}

model Fleet {
  id          String        @id @default(uuid())
  name        String
  vehicle     Vehicle[]
  fleetDriver FleetDriver[]
  account     Account       @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId   String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("fleet")
}

model Driver {
  id                    String          @id @default(uuid())
  name                  String
  email                 String
  password              String
  isDisable             Boolean         @default(false)
  fleetDriver           FleetDriver[]
  vehicleDriver         VehicleDriver[]
  work                  Work[]
  cost                  Cost[]
  account               Account         @relation(fields: [accountId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  accountId             String
  refreshToken          String?
  refreshTokenExpiresAt DateTime?
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  @@map("driver")
}

model FleetDriver {
  id       String @id @default(uuid())
  fleet    Fleet  @relation(fields: [fleetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fleetId  String
  driver   Driver @relation(fields: [driverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  driverId String

  @@map("fleetDriver")
}

model Vehicle {
  id            String          @id @default(uuid())
  name          String
  licensePlate  String
  type          String
  image         String?
  work          Work[]
  cost          Cost[]
  vehicleDriver VehicleDriver[]
  fleet         Fleet           @relation(fields: [fleetId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fleetId       String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@map("vehicle")
}

model VehicleDriver {
  id        String  @id @default(uuid())
  driver    Driver  @relation(fields: [driverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  driverId  String
  vehicle   Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vehicleId String

  @@map("vehicleDriver")
}

model Work {
  id        String   @id @default(uuid())
  match     String?
  destiny   String?
  distance  Float
  profit    Float
  extra     Float?
  status    String   @default("PENDING")
  driver    Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  driverId  String
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vehicleId String
  client    client   @relation(fields: [clientId], references: [id])
  clientId  String
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("work")
}

model Cost {
  id          String   @id @default(uuid())
  name        String
  value       Float
  description String?
  image       String?
  driver      Driver   @relation(fields: [driverId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  driverId    String
  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  vehicleId   String
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("cost")
}
